{
  "name": "rtc-bufferedchannel",
  "version": "0.5.0",
  "description": "Wraps a core browser RTCDataChannel with a buffering layer to ensure data channel send limits are observed",
  "main": "index.js",
  "scripts": {
    "test": "$(npm bin)/zuul -- test/all.js",
    "gendocs": "gendocs > README.md"
  },
  "repository": {
    "type": "git",
    "url": "git://github.com/rtc-io/rtc-bufferedchannel.git"
  },
  "keywords": [
    "webrtc",
    "rtc.io",
    "data"
  ],
  "author": {
    "name": "Damon Oehlman",
    "email": "damon.oehlman@nicta.com.au"
  },
  "license": "Apache 2.0",
  "bugs": {
    "url": "https://github.com/rtc-io/rtc-bufferedchannel/issues"
  },
  "homepage": "https://github.com/rtc-io/rtc-bufferedchannel",
  "devDependencies": {
    "tape": "~2.5.0",
    "peerpair": "~0.4.0",
    "rtc-quickconnect": "~0.12.0",
    "mocha": "~1.17.1",
    "zuul": "~1.5.2",
    "rtc-media": "~1.5.4",
    "rtc-videoproc": "~0.11.0"
  },
  "dependencies": {},
  "contributors": [
    {
      "name": "Damon Oehlman",
      "email": "damon.oehlman@nicta.com.au",
      "url": "https://github.com/DamonOehlman"
    },
    {
      "name": "Silvia Pfeiffer",
      "email": "silvia.pfeiffer@nicta.com.au",
      "url": "https://github.com/silviapfeiffer"
    }
  ],
  "readme": "# rtc-bufferedchannel\n\nThis is a wrapper for a native `RTCDataChannel` that ensures that data\nsent over the channel complies with the current data channel size limits\n(which is < 16Kb for firefox <--> chrome interop).\n\n__NOTE:__ The `rtc-bufferedchannel` module is able to wrap any standard\n`RTCDataChannel` object.  If you use other WebRTC helper libraries, then\nthis module can still be **very useful**!\n\n\n[![NPM](https://nodei.co/npm/rtc-bufferedchannel.png)](https://nodei.co/npm/rtc-bufferedchannel/)\n\n[![Build Status](https://travis-ci.org/rtc-io/rtc-bufferedchannel.png?branch=master)](https://travis-ci.org/rtc-io/rtc-bufferedchannel)\n[![unstable](http://hughsk.github.io/stability-badges/dist/unstable.svg)](http://github.com/hughsk/stability-badges)\n\n## How it Works\n\nThe `rtc-bufferedchannel` works by wrapping a standard `RTCDataChannel` with\nan object that proxies `send` function calls and emits data through an\n`channel.on('data', handler)` event handler for receiving data.  When you\ncall the `send` function provided by buffered channel it determines the size\nof the message that you are sending and determines whether that needs to be\n\"chunked\" to assist with successful delivery of your data.\n\nAt this present point in time, a browser will complain if you attempt to\nsend large payloads of data via a data channel, and this is where the\n`rtc-bufferedchannel` module comes to your rescue.\n\n### Typed Array Handling\n\nSince `rtc-bufferedchannel@0.3` all manner of typed integer arrays (int, \nuint, etc) are catered for and correctly chunked to ensure successful delivery.\nAdditionally, the module will provide identification of the typed array type\nbefore sending the raw data across the wire.  Using this functionality when\nyou receive the `data` event from the buffered channel you will receive the\ndata in the same format it was sent from your peer, i.e.\n`Uint8Array` in, `Uint8Array` out which is different to the standard\ndata channel functionality.\n\n## Example Usage\n\nShown below is a simple example of how you might use a buffered channel to\nsend data that is larger than what you can typically send over a webrtc\ndata channel:\n\n```js\nvar quickconnect = require('rtc-quickconnect');\nvar buffered = require('rtc-bufferedchannel');\n\n// include the base64 encoded image data\nvar mentosImage = require('../test/data/dietcoke-mentos');\n\nquickconnect('http://rtc.io/switchboard', { room: 'buffertest' })\n  .createDataChannel('mentos')\n  .once('mentos:open', function(dc, id) {\n    var bc = buffered(dc);\n    console.log('found new peer (id = ' + id + '), sending an image');\n\n    // when we get some data, then create a new image\n    bc.on('data', function(data) {\n      var img;\n\n      console.log('received some image data', data);\n      img = document.createElement('img');\n      img.src = data;\n\n      document.body.appendChild(img);\n    });\n\n    // send the mentos data to the person that just connected to us\n    bc.send(mentosImage);\n  });\n```\n\n## License(s)\n\n### Apache 2.0\n\nCopyright 2014 National ICT Australia Limited (NICTA)\n\n   Licensed under the Apache License, Version 2.0 (the \"License\");\n   you may not use this file except in compliance with the License.\n   You may obtain a copy of the License at\n\n     http://www.apache.org/licenses/LICENSE-2.0\n\n   Unless required by applicable law or agreed to in writing, software\n   distributed under the License is distributed on an \"AS IS\" BASIS,\n   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n   See the License for the specific language governing permissions and\n   limitations under the License.\n",
  "readmeFilename": "README.md",
  "_id": "rtc-bufferedchannel@0.5.0",
  "_shasum": "85e56e1e4d2c1ea752acb71b258d927b84702f80",
  "_from": "rtc-bufferedchannel@~0.5.0",
  "_resolved": "https://registry.npmjs.org/rtc-bufferedchannel/-/rtc-bufferedchannel-0.5.0.tgz"
}
